/**
 * @fileoverview gRPC-Web generated client stub for session
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: session.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as session_pb from './session_pb'; // proto import: "session.proto"


export class SessionServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddSession = new grpcWeb.MethodDescriptor(
    '/session.SessionService/AddSession',
    grpcWeb.MethodType.UNARY,
    session_pb.AddSessionRequest,
    session_pb.AddSessionResponse,
    (request: session_pb.AddSessionRequest) => {
      return request.serializeBinary();
    },
    session_pb.AddSessionResponse.deserializeBinary
  );

  addSession(
    request: session_pb.AddSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<session_pb.AddSessionResponse>;

  addSession(
    request: session_pb.AddSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: session_pb.AddSessionResponse) => void): grpcWeb.ClientReadableStream<session_pb.AddSessionResponse>;

  addSession(
    request: session_pb.AddSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: session_pb.AddSessionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/session.SessionService/AddSession',
        request,
        metadata || {},
        this.methodDescriptorAddSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/session.SessionService/AddSession',
    request,
    metadata || {},
    this.methodDescriptorAddSession);
  }

  methodDescriptorGetSession = new grpcWeb.MethodDescriptor(
    '/session.SessionService/GetSession',
    grpcWeb.MethodType.UNARY,
    session_pb.GetSessionRequest,
    session_pb.GetSessionResponse,
    (request: session_pb.GetSessionRequest) => {
      return request.serializeBinary();
    },
    session_pb.GetSessionResponse.deserializeBinary
  );

  getSession(
    request: session_pb.GetSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<session_pb.GetSessionResponse>;

  getSession(
    request: session_pb.GetSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: session_pb.GetSessionResponse) => void): grpcWeb.ClientReadableStream<session_pb.GetSessionResponse>;

  getSession(
    request: session_pb.GetSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: session_pb.GetSessionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/session.SessionService/GetSession',
        request,
        metadata || {},
        this.methodDescriptorGetSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/session.SessionService/GetSession',
    request,
    metadata || {},
    this.methodDescriptorGetSession);
  }

  methodDescriptorDelSession = new grpcWeb.MethodDescriptor(
    '/session.SessionService/DelSession',
    grpcWeb.MethodType.UNARY,
    session_pb.DelSessionRequest,
    session_pb.DelSessionResponse,
    (request: session_pb.DelSessionRequest) => {
      return request.serializeBinary();
    },
    session_pb.DelSessionResponse.deserializeBinary
  );

  delSession(
    request: session_pb.DelSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<session_pb.DelSessionResponse>;

  delSession(
    request: session_pb.DelSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: session_pb.DelSessionResponse) => void): grpcWeb.ClientReadableStream<session_pb.DelSessionResponse>;

  delSession(
    request: session_pb.DelSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: session_pb.DelSessionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/session.SessionService/DelSession',
        request,
        metadata || {},
        this.methodDescriptorDelSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/session.SessionService/DelSession',
    request,
    metadata || {},
    this.methodDescriptorDelSession);
  }

}

